{"ast":null,"code":"var _jsxFileName = \"/home/soklin/Documents/Project/MIS/Dev-MIS/front-end/mis/src/app/MatxLayout/MatxLayoutSFC.jsx\";\nimport React, { useContext, useEffect } from \"react\";\nimport { MatxLayouts } from \"./index\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { matchRoutes } from \"react-router-config\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\nimport { setLayoutSettings, setDefaultSettings } from \"app/redux/actions/LayoutActions\";\nimport { isEqual, merge } from \"lodash\";\nimport { isMdScreen } from \"utils\";\nimport { MatxSuspense } from \"matx\";\nvar tempSettings;\n\nvar MatxLayoutSFC = function MatxLayoutSFC(props) {\n  var appContext = useContext(AppContext);\n  var settings = props.settings,\n      defaultSettings = props.defaultSettings,\n      setLayoutSettings = props.setLayoutSettings,\n      setDefaultSettings = props.setDefaultSettings;\n  tempSettings = settings;\n  useEffect(function () {\n    listenWindowResize();\n\n    if (window) {\n      // LISTEN WINDOW RESIZE\n      window.addEventListener(\"resize\", listenWindowResize);\n    }\n\n    return function () {\n      if (window) {\n        window.removeEventListener(\"resize\", listenWindowResize);\n      }\n    };\n  }, []);\n  useEffect(function () {\n    updateSettingsFromRouter();\n  }, [props.location]);\n\n  var listenWindowResize = function listenWindowResize() {\n    var settings = tempSettings;\n\n    if (settings.layout1Settings.leftSidebar.show) {\n      var mode = isMdScreen() ? \"close\" : \"full\";\n      setLayoutSettings(merge({}, settings, {\n        layout1Settings: {\n          leftSidebar: {\n            mode: mode\n          }\n        }\n      }));\n    }\n  };\n\n  var updateSettingsFromRouter = function updateSettingsFromRouter() {\n    var routes = appContext.routes;\n    var matched = matchRoutes(routes, props.location.pathname)[0];\n\n    if (matched && matched.route.settings) {\n      // ROUTE HAS SETTINGS\n      var updatedSettings = merge({}, settings, matched.route.settings);\n\n      if (!isEqual(settings, updatedSettings)) {\n        setLayoutSettings(updatedSettings); // console.log('Route has settings');\n      }\n    } else if (!isEqual(settings, defaultSettings)) {\n      setLayoutSettings(defaultSettings); // console.log('reset settings', defaultSettings);\n    }\n  };\n\n  var Layout = MatxLayouts[settings.activeLayout];\n  return React.createElement(MatxSuspense, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Layout, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    setLayoutSettings: PropTypes.func.isRequired,\n    setDefaultSettings: PropTypes.func.isRequired,\n    settings: state.layout.settings,\n    defaultSettings: state.layout.defaultSettings\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  setLayoutSettings: setLayoutSettings,\n  setDefaultSettings: setDefaultSettings\n})(MatxLayoutSFC));","map":{"version":3,"sources":["/home/soklin/Documents/Project/MIS/Dev-MIS/front-end/mis/src/app/MatxLayout/MatxLayoutSFC.jsx"],"names":["React","useContext","useEffect","MatxLayouts","PropTypes","withRouter","matchRoutes","connect","AppContext","setLayoutSettings","setDefaultSettings","isEqual","merge","isMdScreen","MatxSuspense","tempSettings","MatxLayoutSFC","props","appContext","settings","defaultSettings","listenWindowResize","window","addEventListener","removeEventListener","updateSettingsFromRouter","location","layout1Settings","leftSidebar","show","mode","routes","matched","pathname","route","updatedSettings","Layout","activeLayout","mapStateToProps","state","func","isRequired","layout"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { MatxLayouts } from \"./index\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { matchRoutes } from \"react-router-config\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\nimport {\n  setLayoutSettings,\n  setDefaultSettings\n} from \"app/redux/actions/LayoutActions\";\nimport { isEqual, merge } from \"lodash\";\nimport { isMdScreen } from \"utils\";\nimport { MatxSuspense } from \"matx\";\n\nlet tempSettings;\n\nconst MatxLayoutSFC = props => {\n  let appContext = useContext(AppContext);\n  const {\n    settings,\n    defaultSettings,\n    setLayoutSettings,\n    setDefaultSettings\n  } = props;\n\n  tempSettings = settings;\n\n  useEffect(() => {\n    listenWindowResize();\n\n    if (window) {\n      // LISTEN WINDOW RESIZE\n      window.addEventListener(\"resize\", listenWindowResize);\n    }\n    return () => {\n      if (window) {\n        window.removeEventListener(\"resize\", listenWindowResize);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    updateSettingsFromRouter();\n  }, [props.location]);\n\n  const listenWindowResize = () => {\n    let settings = tempSettings;\n    if (settings.layout1Settings.leftSidebar.show) {\n      let mode = isMdScreen() ? \"close\" : \"full\";\n      setLayoutSettings(\n        merge({}, settings, { layout1Settings: { leftSidebar: { mode } } })\n      );\n    }\n  };\n\n  const updateSettingsFromRouter = () => {\n    const { routes } = appContext;\n    const matched = matchRoutes(routes, props.location.pathname)[0];\n\n    if (matched && matched.route.settings) {\n      // ROUTE HAS SETTINGS\n      const updatedSettings = merge({}, settings, matched.route.settings);\n      if (!isEqual(settings, updatedSettings)) {\n        setLayoutSettings(updatedSettings);\n        // console.log('Route has settings');\n      }\n    } else if (!isEqual(settings, defaultSettings)) {\n      setLayoutSettings(defaultSettings);\n      // console.log('reset settings', defaultSettings);\n    }\n  };\n\n  const Layout = MatxLayouts[settings.activeLayout];\n\n  return (\n    <MatxSuspense>\n      <Layout {...props} />\n    </MatxSuspense>\n  );\n};\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings,\n  defaultSettings: state.layout.defaultSettings\n});\n\nexport default withRouter(\n  connect(mapStateToProps, { setLayoutSettings, setDefaultSettings })(\n    MatxLayoutSFC\n  )\n);\n"]},"metadata":{},"sourceType":"module"}