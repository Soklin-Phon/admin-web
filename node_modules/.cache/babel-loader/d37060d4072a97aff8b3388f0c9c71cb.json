{"ast":null,"code":"var _jsxFileName = \"/home/soklin/Project/MIS/Dev-MIS/front-end/mis/src/matx/components/MatxVerticalNav/MatxVerticalNav.jsx\";\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Icon } from \"@material-ui/core\";\nimport TouchRipple from \"@material-ui/core/ButtonBase\";\nimport MatxVerticalNavExpansionPanel from \"./MatxVerticalNavExpansionPanel\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { useSelector } from \"react-redux\";\n\nvar styles = function styles(theme) {\n  return {\n    expandIcon: {\n      transition: \"transform 225ms cubic-bezier(0, 0, 0.2, 1) 0ms\",\n      transform: \"rotate(90deg)\"\n    },\n    collapseIcon: {\n      transition: \"transform 225ms cubic-bezier(0, 0, 0.2, 1) 0ms\",\n      transform: \"rotate(0deg)\"\n    }\n  };\n};\n\nvar MatxVerticalNav = function MatxVerticalNav(props) {\n  var navigations = useSelector(function (_ref) {\n    var navigations = _ref.navigations;\n    return navigations;\n  });\n\n  var renderLevels = function renderLevels(data) {\n    return data.map(function (item, index) {\n      if (item.children) {\n        return React.createElement(MatxVerticalNavExpansionPanel, {\n          item: item,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, renderLevels(item.children));\n      } else if (item.type === \"extLink\") {\n        return React.createElement(\"a\", {\n          key: index,\n          href: item.path,\n          className: \"nav-item\",\n          rel: \"noopener noreferrer\",\n          target: \"_blank\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, React.createElement(TouchRipple, {\n          key: item.name,\n          name: \"child\",\n          className: \"w-full\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, function () {\n          if (item.icon) {\n            return React.createElement(Icon, {\n              className: \"item-icon align-middle\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 44\n              },\n              __self: this\n            }, item.icon);\n          } else {\n            return React.createElement(\"span\", {\n              className: \"item-icon icon-text\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 48\n              },\n              __self: this\n            }, item.iconText);\n          }\n        }(), React.createElement(\"span\", {\n          className: \"align-middle item-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, item.name), React.createElement(\"div\", {\n          className: \"mx-auto\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }), item.badge && React.createElement(\"div\", {\n          className: \"badge bg-\".concat(item.badge.color),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, item.badge.value)));\n      } else {\n        return React.createElement(NavLink, {\n          key: index,\n          to: item.path,\n          className: \"nav-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(TouchRipple, {\n          key: item.name,\n          name: \"child\",\n          className: \"w-full\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, function () {\n          if (item.icon) {\n            return React.createElement(Icon, {\n              className: \"item-icon align-middle\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 69\n              },\n              __self: this\n            }, item.icon);\n          } else {\n            return React.createElement(\"span\", {\n              className: \"item-icon icon-text\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 73\n              },\n              __self: this\n            }, item.iconText);\n          }\n        }(), React.createElement(\"span\", {\n          className: \"align-middle item-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, item.name), React.createElement(\"div\", {\n          className: \"mx-auto\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }), item.badge && React.createElement(\"div\", {\n          className: \"badge bg-\".concat(item.badge.color),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, item.badge.value)));\n      }\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"navigation\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, renderLevels(navigations));\n};\n\nexport default withStyles(styles)(MatxVerticalNav);","map":{"version":3,"sources":["/home/soklin/Project/MIS/Dev-MIS/front-end/mis/src/matx/components/MatxVerticalNav/MatxVerticalNav.jsx"],"names":["React","NavLink","Icon","TouchRipple","MatxVerticalNavExpansionPanel","withStyles","useSelector","styles","theme","expandIcon","transition","transform","collapseIcon","MatxVerticalNav","props","navigations","renderLevels","data","map","item","index","children","type","path","name","icon","iconText","badge","color","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Icon } from \"@material-ui/core\";\nimport TouchRipple from \"@material-ui/core/ButtonBase\";\nimport MatxVerticalNavExpansionPanel from \"./MatxVerticalNavExpansionPanel\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { useSelector } from \"react-redux\";\n\nconst styles = theme => ({\n  expandIcon: {\n    transition: \"transform 225ms cubic-bezier(0, 0, 0.2, 1) 0ms\",\n    transform: \"rotate(90deg)\"\n  },\n  collapseIcon: {\n    transition: \"transform 225ms cubic-bezier(0, 0, 0.2, 1) 0ms\",\n    transform: \"rotate(0deg)\"\n  }\n});\n\nconst MatxVerticalNav = props => {\n  const navigations = useSelector(({ navigations }) => navigations);\n\n  const renderLevels = data => {\n    return data.map((item, index) => {\n      if (item.children) {\n        return (\n          <MatxVerticalNavExpansionPanel item={item} key={index}>\n            {renderLevels(item.children)}\n          </MatxVerticalNavExpansionPanel>\n        );\n      } else if (item.type === \"extLink\") {\n        return (\n          <a\n            key={index}\n            href={item.path}\n            className=\"nav-item\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            <TouchRipple key={item.name} name=\"child\" className=\"w-full\">\n              {(() => {\n                if (item.icon) {\n                  return (\n                    <Icon className=\"item-icon align-middle\">{item.icon}</Icon>\n                  );\n                } else {\n                  return (\n                    <span className=\"item-icon icon-text\">{item.iconText}</span>\n                  );\n                }\n              })()}\n              <span className=\"align-middle item-text\">{item.name}</span>\n              <div className=\"mx-auto\"></div>\n              {item.badge && (\n                <div className={`badge bg-${item.badge.color}`}>\n                  {item.badge.value}\n                </div>\n              )}\n            </TouchRipple>\n          </a>\n        );\n      } else {\n        return (\n          <NavLink key={index} to={item.path} className=\"nav-item\">\n            <TouchRipple key={item.name} name=\"child\" className=\"w-full\">\n              {(() => {\n                if (item.icon) {\n                  return (\n                    <Icon className=\"item-icon align-middle\">{item.icon}</Icon>\n                  );\n                } else {\n                  return (\n                    <span className=\"item-icon icon-text\">{item.iconText}</span>\n                  );\n                }\n              })()}\n              <span className=\"align-middle item-text\">{item.name}</span>\n              <div className=\"mx-auto\"></div>\n              {item.badge && (\n                <div className={`badge bg-${item.badge.color}`}>\n                  {item.badge.value}\n                </div>\n              )}\n            </TouchRipple>\n          </NavLink>\n        );\n      }\n    });\n  };\n\n  return <div className=\"navigation\">{renderLevels(navigations)}</div>;\n};\n\nexport default withStyles(styles)(MatxVerticalNav);\n"]},"metadata":{},"sourceType":"module"}